name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy bandit radon complexity-report
        
    - name: Code formatting (Black)
      run: |
        black --check --diff app/ tests/ || echo "::warning::Code formatting issues found"
        
    - name: Import sorting (isort)
      run: |
        isort --check-only --diff app/ tests/ || echo "::warning::Import sorting issues found"
        
    - name: Linting (flake8)
      run: |
        flake8 app/ tests/ --statistics --tee --output-file=flake8-report.txt
        
    - name: Type checking (mypy)
      run: |
        mypy app/ --html-report mypy-report --txt-report mypy-txt-report
      continue-on-error: true
      
    - name: Security linting (bandit)
      run: |
        bandit -r app/ -f json -o bandit-report.json
        bandit -r app/ -f txt -o bandit-report.txt
      continue-on-error: true
      
    - name: Complexity analysis (radon)
      run: |
        radon cc app/ --json > complexity-report.json
        radon cc app/ > complexity-report.txt
        radon mi app/ > maintainability-report.txt
        
    - name: Generate code quality summary
      run: |
        cat > code-quality-summary.md << 'EOF'
        # Code Quality Report
        
        ## Flake8 Linting Results
        ```
        $(cat flake8-report.txt | tail -20)
        ```
        
        ## Complexity Analysis
        ```
        $(cat complexity-report.txt | head -20)
        ```
        
        ## Maintainability Index
        ```
        $(cat maintainability-report.txt | head -10)
        ```
        
        ## Security Analysis
        ```
        $(cat bandit-report.txt | tail -20)
        ```
        EOF
        
    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt
          mypy-report/
          bandit-report.*
          complexity-report.*
          maintainability-report.txt
          code-quality-summary.md
          
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=bharathmrr_Slackbot-Content-Pipeline-
          -Dsonar.organization=bharathmrr
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.python.xunit.reportPath=test-results.xml
          
    - name: Comment PR with quality metrics
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## ðŸ“Š Code Quality Report\n\n';
          
          // Add flake8 results
          if (fs.existsSync('flake8-report.txt')) {
            const flake8 = fs.readFileSync('flake8-report.txt', 'utf8');
            const lines = flake8.split('\n');
            const summary = lines[lines.length - 2] || 'No issues found';
            comment += `**Linting:** ${summary}\n\n`;
          }
          
          // Add complexity results
          if (fs.existsSync('complexity-report.json')) {
            const complexity = JSON.parse(fs.readFileSync('complexity-report.json', 'utf8'));
            const avgComplexity = Object.values(complexity).flat()
              .reduce((sum, item) => sum + (item.complexity || 0), 0) / 
              Object.values(complexity).flat().length || 0;
            comment += `**Average Complexity:** ${avgComplexity.toFixed(2)}\n\n`;
          }
          
          comment += 'ðŸ“‹ Full reports available in artifacts.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
