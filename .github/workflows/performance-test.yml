name: Performance Testing

on:
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL for performance testing'
        required: true
        default: 'https://slackbot-content-pipeline.onrender.com'
      duration:
        description: 'Test duration in seconds'
        required: true
        default: '300'

jobs:
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install locust requests
        
    - name: Create Locust test file
      run: |
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import json
        
        class SlackbotUser(HttpUser):
            wait_time = between(1, 3)
            
            def on_start(self):
                """Setup for each user"""
                pass
                
            @task(3)
            def health_check(self):
                """Test health endpoint"""
                self.client.get("/health")
                
            @task(2)
            def root_endpoint(self):
                """Test root endpoint"""
                self.client.get("/")
                
            @task(1)
            def api_batches(self):
                """Test API endpoints"""
                # Mock batch ID for testing
                self.client.get("/api/batches/test-batch-123")
        EOF
        
    - name: Run performance tests
      run: |
        locust -f locustfile.py \
          --host=${{ github.event.inputs.target_url || 'https://slackbot-content-pipeline.onrender.com' }} \
          --users=10 \
          --spawn-rate=2 \
          --run-time=${{ github.event.inputs.duration || '300' }}s \
          --headless \
          --html=performance-report.html \
          --csv=performance-results
          
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          performance-report.html
          performance-results_*.csv
          
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read performance results
          const statsFile = 'performance-results_stats.csv';
          if (fs.existsSync(statsFile)) {
            const stats = fs.readFileSync(statsFile, 'utf8');
            const lines = stats.split('\n');
            
            let comment = '## ðŸš€ Performance Test Results\n\n';
            comment += '| Endpoint | Requests | Failures | Avg Response Time | Min | Max |\n';
            comment += '|----------|----------|----------|-------------------|-----|-----|\n';
            
            lines.slice(1, -1).forEach(line => {
              const cols = line.split(',');
              if (cols.length >= 6) {
                comment += `| ${cols[0]} | ${cols[1]} | ${cols[2]} | ${cols[3]}ms | ${cols[4]}ms | ${cols[5]}ms |\n`;
              }
            });
            
            comment += '\nðŸ“Š Full report available in artifacts.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
